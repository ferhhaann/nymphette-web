// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://duouhbzwivonyssvtiqo.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImR1b3VoYnp3aXZvbnlzc3Z0aXFvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU1MjkzNjIsImV4cCI6MjA3MTEwNTM2Mn0.PjAbI-RLQpL8_hFr29bWdkrIUAPcPWTHgqJGV9CYyQ0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  },
  global: {
    headers: {
      'x-client-info': 'travel-agency-app/1.0.0',
    },
    fetch: async (url, options = {}) => {
      // Add timeout and retry logic for international users
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 second timeout
      
      try {
        const response = await fetch(url, {
          ...options,
          signal: controller.signal,
        });
        clearTimeout(timeoutId);
        
        // Log successful requests for debugging
        console.log(`Supabase request: ${response.status} ${url}`);
        return response;
      } catch (error) {
        clearTimeout(timeoutId);
        console.error(`Supabase request failed for ${url}:`, error);
        
        // Add geographic info for debugging
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(
            (position) => {
              console.log('User location for debugging:', {
                latitude: position.coords.latitude,
                longitude: position.coords.longitude,
                timestamp: new Date().toISOString()
              });
            },
            () => console.log('Location unavailable for debugging')
          );
        }
        
        throw error;
      }
    }
  }
});